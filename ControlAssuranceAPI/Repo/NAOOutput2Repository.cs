using CAT.Libs;
using CAT.Models;
using CAT.Repo.Interface;

namespace CAT.Repo;


public class NAOOutput2Repository : BaseRepository, INAOOutput2Repository
{
    private readonly ControlAssuranceContext _context;
    private readonly IHttpContextAccessor _httpContextAccessor;
    private readonly IUtils _utils;
    public NAOOutput2Repository(ControlAssuranceContext context, IHttpContextAccessor httpContextAccessor, IUtils utils)
            : base(context, httpContextAccessor)
    {
        _context = context;
        _httpContextAccessor = httpContextAccessor;
        _utils = utils;
    }

    public IQueryable<NAOOutput2> GetById(int id)
    {
        return _context.NAOOutput2s
            .AsQueryable()
            .Where(c => c.ID == id);
    }

    public NAOOutput2? Find(int key)
    {
        return _context.NAOOutput2s.FirstOrDefault(x => x.ID == key);
    }

    public IQueryable<NAOOutput2> GetAll()
    {
        return _context.NAOOutput2s.AsQueryable();
    }

    public string GetPdfStatus()
    {
        string status = "";
        var output = _context.NAOOutput2s.FirstOrDefault(x => x.ID == 1);
        if (output != null)
        {
            if (output.PdfStatus == "Cr")
            {
                status = $"Last PDF generated by {output.LastActionUser} on {output?.PdfDate?.ToString("dd/MM/yyyy HH:mm")}";
            }
            else if (output.PdfStatus == "Delete")
            {
                status = $"Last PDF deleted by {output.LastActionUser} on {output?.PdfDate?.ToString("dd/MM/yyyy HH:mm")}";
            }
            else
            {
                status = output?.PdfStatus ?? "";
            }
        }

        return status;
    }

    public void DeletePdfInfo()
    {
        var lastActionUser = ApiUser.Title;
        this.ChangePdfStatus("Delete", null, lastActionUser);
    }

    public string CreatePdf(string publicationIds, string spSiteUrl)
    {
        string initialReturnStatus = "Working... Please Wait";
        var lastActionUser = ApiUser.Title;
        var userName = base.Username;
        
        this.ChangePdfStatus(initialReturnStatus, null, lastActionUser);

        Task.Run(() =>
        {
            var context = _utils.GetNewDbContext();
            NAOOutput2Repository output2Repository = new NAOOutput2Repository(context, _httpContextAccessor, _utils);
            try
            {
                string tempFolder = @"c:\local\temp\";
                string guid = System.Guid.NewGuid().ToString();
                string tempLocation = System.IO.Path.Combine(tempFolder, guid);
                System.IO.Directory.CreateDirectory(tempLocation);

                NAOPublicationRepository nAOPublicationRepository = new NAOPublicationRepository(context, userName);
                NAOPeriodRepository nAOPeriodRepository = new NAOPeriodRepository(context, _httpContextAccessor);

                GoDefFormRepository goDFR = new GoDefFormRepository(context);
                string spAccessDetails = goDFR.Find(1)?.Access ?? "";
                string outputPdfName = "NAO_Output_By_Publication.pdf";

                Libs.PdfLib pdfLib = new Libs.PdfLib();
                pdfLib.CreatetNaoPdf2(publicationIds, nAOPublicationRepository, nAOPeriodRepository, tempLocation, outputPdfName, spSiteUrl, spAccessDetails);

                Thread.Sleep(500);
                //delete temp folder which we created earlier
                System.IO.Directory.Delete(tempLocation, true);

                output2Repository.ChangePdfStatus("Cr", outputPdfName, lastActionUser);
            }
            catch (Exception ex)
            {
                string msg = "Err: " + ex.Message;
                output2Repository.ChangePdfStatus(msg, null, lastActionUser);
            }
        });


        return initialReturnStatus;
    }

    private void ChangePdfStatus(string pdfStatus, string? outputPdfName, string? lastActionUser)
    {
        var output = _context.NAOOutput2s.FirstOrDefault(x => x.ID == 1);
        if (output == null)
        {
            output = new NAOOutput2();
            output.ID = 1;
            _context.NAOOutput2s.Add(output);
        }
        output.PdfStatus = pdfStatus;
        if (pdfStatus == "Cr")
        {
            output.PdfName = outputPdfName;
        }
        output.PdfDate = DateTime.Now;
        output.LastActionUser = lastActionUser;
        _context.SaveChanges();
    }


}
