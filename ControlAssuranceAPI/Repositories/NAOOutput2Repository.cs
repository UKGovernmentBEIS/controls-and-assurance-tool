using ControlAssuranceAPI.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Threading;
using System.Threading.Tasks;
using System.Web;

namespace ControlAssuranceAPI.Repositories
{
    public class NAOOutput2Repository : BaseRepository
    {
        public NAOOutput2Repository(IPrincipal user) : base(user) { }

        public NAOOutput2Repository(IPrincipal user, IControlAssuranceContext context) : base(user, context) { }

        public NAOOutput2Repository(IControlAssuranceContext context) : base(context) { }

        public IQueryable<NAOOutput2> NAOOutput2
        {
            get
            {
                return (from x in db.NAOOutput2
                        select x);
            }
        }

        public NAOOutput2 Find(int keyValue)
        {
            return NAOOutput2.Where(f => f.ID == keyValue).FirstOrDefault();
        }

        public void ChangePdfStatus(string pdfStatus, string outputPdfName)
        {
            var output = db.NAOOutput2.FirstOrDefault(x => x.ID == 1);
            if(output == null)
            {
                output = new NAOOutput2();
                output.ID = 1;
                db.NAOOutput2.Add(output);
            }
            output.PdfStatus = pdfStatus;
            if (pdfStatus == "Cr")
            {
                output.PdfName = outputPdfName;
            }
            output.PdfDate = DateTime.Now;
            output.LastActionUser = base.ApiUser.Title;
            db.SaveChanges();
        }

        public string CreatePdf(string publicationIds, string spSiteUrl)
        {
            string initialReturnStatus = "Working... Please Wait";
            this.ChangePdfStatus(initialReturnStatus, null);
            Task.Run(() =>
            {
                NAOOutput2Repository output2Repository = new NAOOutput2Repository(base.user);
                try

                {
                    string tempFolder = @"c:\local\temp\";
                    string guid = System.Guid.NewGuid().ToString();
                    string tempLocation = System.IO.Path.Combine(tempFolder, guid);
                    System.IO.Directory.CreateDirectory(tempLocation);





                    NAOPublicationRepository nAOPublicationRepository = new NAOPublicationRepository(base.user);
                    NAOPeriodRepository nAOPeriodRepository = new NAOPeriodRepository(base.user);

                    GoDefFormRepository goDFR = new GoDefFormRepository(base.user);
                    string spAccessDetails = goDFR.GoDefForms.FirstOrDefault(x => x.ID == 1).Access;

                    //var output = outputRepository.NAOOutputs.FirstOrDefault(x => x.ID == key);
                    string outputPdfName = "NAO_Output_By_Publication.pdf";


                    Libs.PdfLib pdfLib = new Libs.PdfLib();
                    pdfLib.CreatetNaoPdf2(publicationIds, nAOPublicationRepository, nAOPeriodRepository, tempLocation, outputPdfName, spSiteUrl, spAccessDetails);

                    Thread.Sleep(500);
                    //delete temp folder which we created earlier
                    System.IO.Directory.Delete(tempLocation, true);

                    output2Repository.ChangePdfStatus("Cr", outputPdfName);

                    //should add log
                }
                catch (Exception ex)
                {
                    //should add log
                    string msg = "Err: " + ex.Message;
                    output2Repository.ChangePdfStatus(msg, null);

                }


            });


            return initialReturnStatus;
        }

        public string GetPdfStatus()
        {
            string status = "";
            var output = db.NAOOutput2.FirstOrDefault(x => x.ID == 1);
            if (output != null)
            {
                if (output.PdfStatus == "Cr")
                {
                    status = $"Last PDF generated by {output.LastActionUser} on {output.PdfDate.Value.ToString("dd/MM/yyyy HH:mm")}";
                }
                else if (output.PdfStatus == "Delete")
                {
                    status = $"Last PDF deleted by {output.LastActionUser} on {output.PdfDate.Value.ToString("dd/MM/yyyy HH:mm")}";
                }
                else
                {
                    status = output.PdfStatus;
                }
            }

            return status;
        }

        public void DeletePdfInfo()
        {
            this.ChangePdfStatus("Delete", null);
        }
    }
}